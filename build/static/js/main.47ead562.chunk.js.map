{"version":3,"sources":["components/statistics/Statistics.module.css","components/feedbackOptions/FeedbackOptions.module.css","components/feedbackOptions/FeedbackOptions.jsx","components/statistics/Statistics.jsx","components/sectionTitle/Section.jsx","components/notification/Notification.jsx","helpers/copyInNewObject.jsx","helpers/hasCountTotal.jsx","components/mainPage/MainPage.jsx","App.js","index.js"],"names":["module","exports","FeedbackOptions","onLeaveFeedback","buttonListItems","options","map","item","onClick","className","style","btn","Statistics","data","good","neutral","bad","total","positivePercentage","Object","entries","wrapper","title","Section","children","Notification","message","copyInNewObject","obj","newState","key","hasCountTotal","values","reduce","tot","feed","MainPage","useState","state","setState","keys","countTotalFeedback","name","newName","toLowerCase","prevState","positive","Math","round","countPositiveFeedbackPercentage","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8IACAA,EAAOC,QAAU,CAAC,MAAQ,0BAA0B,QAAU,8B,iBCA9DD,EAAOC,QAAU,CAAC,IAAM,+B,4KCUTC,EARS,SAAC,GAAgC,IAA/BC,EAA8B,EAA9BA,gBAEpBC,EAFkD,EAAbC,QAEXC,KAAI,SAACC,GAAD,OAAS,wBAAmBC,QAAS,kBAAKL,EAAgBI,IAAME,UAAWC,IAAMC,IAAxE,SAA8EJ,GAAjEA,MACtD,OAAS,8BACJH,K,gBC4BMQ,EAhCI,SAAC,GAQb,IAPLC,EAOI,EAPJA,KACAC,EAMI,EANJA,KACAC,EAKI,EALJA,QACAC,EAII,EAJJA,IACAC,EAGI,EAHJA,MACAC,EAEI,EAFJA,mBAGsBC,OAAOC,QAAQP,GAAMP,KAAI,SAACC,GAC9C,OACE,qBAAgBE,UAAWC,IAAMW,QAAjC,SACE,qBAAIZ,UAAWC,IAAMY,MAArB,UACGf,EAAK,GADR,KACcA,EAAK,OAFXA,MAQd,OACE,qCACE,wCAAWO,KACX,2CAAcC,KACd,uCAAUC,KACV,yCAAYC,KACZ,qDACsBC,EAAqBA,EAAqB,IAAM,WClB7DK,EATC,SAAC,GAAyB,IAAvBD,EAAsB,EAAtBA,MAAOE,EAAe,EAAfA,SACxB,OACE,qCACE,6BAAKF,IACJE,MCAQC,EAJM,SAAC,GAAe,IAAdC,EAAa,EAAbA,QACnB,OAAS,6BAAKA,KCHLC,EAAkB,SAACC,GAC5B,IAAMC,EAAW,GACjB,IAAK,IAAIC,KAAOF,EACdC,EAASC,GAAOF,EAAIE,GAEtB,OAAOD,GCLEE,EAAgB,SAACH,GAExB,OADYT,OAAOa,OAAOJ,GAAKK,QAAO,SAACC,EAAKC,GAAN,OAAcD,EAAKC,MC+DhDC,EAxDE,WAAO,IAAD,EACKC,mBAAS,CACjCvB,KAAM,EACNC,QAAS,EACTC,IAAK,IAJc,mBACdsB,EADc,KACPC,EADO,KA4BbzB,EAAuBwB,EAAvBxB,KAAMC,EAAiBuB,EAAjBvB,QAASC,EAAQsB,EAARtB,IACfX,EAAUc,OAAOqB,KAAKF,GACtBrB,EARqB,WAC3B,IAAMY,EAAWF,EAAgBW,GAEjC,OADcP,EAAcF,GAMdY,GAEhB,OAAc,qCACZ,cAAC,EAAD,CAASnB,MAAM,wBAAf,SACE,cAAC,EAAD,CACEjB,QAASA,EACTF,gBA7Be,SAACuC,GACpB,IAAMC,EAAUD,EAAKE,cACrBL,GAAS,SAACM,GAAD,mBAAC,eACLA,GADI,kBAENF,EAAUE,EAAUF,GAAW,YA4BlC,cAAC,EAAD,CAASrB,MAAM,aAAf,SACGL,EACC,cAAC,EAAD,CACEJ,KAAMyB,EACNxB,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOA,EACPC,mBAhCkC,WACxC,IAAMW,EAAWF,EAAgBW,GAC3BQ,EAAW3B,OAAOa,OAAOH,GAAU,GACnCZ,EAAQc,EAAcF,GAC5B,OAAOkB,KAAKC,MAAOF,EAAW7B,EAAS,KA4BbgC,KAGtB,cAAC,EAAD,CAAcvB,QAAQ,4BC/CfwB,MARf,WACE,OACE,8BACG,cAAC,EAAD,OCAPC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.47ead562.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"Statistics_title__3KGeH\",\"wrapper\":\"Statistics_wrapper__3MnIO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"btn\":\"FeedbackOptions_btn__fXYS1\"};","import PropTypes from \"prop-types\";\r\nimport style from './FeedbackOptions.module.css'\r\n\r\nconst FeedbackOptions = ({onLeaveFeedback, options}) => {\r\n\r\nconst buttonListItems = options.map((item)=> <button key={item} onClick={()=> onLeaveFeedback(item)}className={style.btn}>{item}</button>)\r\n    return ( <div>\r\n        {buttonListItems}\r\n    </div> );\r\n}\r\n \r\nexport default FeedbackOptions;\r\n\r\nFeedbackOptions.propTypes = {\r\n    options: PropTypes.array.isRequired,\r\n    onLeaveFeedback: PropTypes.func.isRequired,\r\n  };","import PropTypes from \"prop-types\";\r\nimport style from \"./Statistics.module.css\";\r\n\r\nconst Statistics = ({\r\n  data,\r\n  good,\r\n  neutral,\r\n  bad,\r\n  total,\r\n  positivePercentage,\r\n\r\n}) => {\r\n  const arrayFromData = Object.entries(data).map((item) => {\r\n    return (\r\n      <div key={item} className={style.wrapper}>\r\n        <h3 className={style.title}>\r\n          {item[0]}: {item[1]}\r\n        </h3>\r\n      </div>\r\n    );\r\n  });\r\n\r\n  return (\r\n    <>\r\n      <h3>Good: {good}</h3>\r\n      <h3>Neutral: {neutral}</h3>\r\n      <h3>Bad: {bad}</h3>\r\n      <h3>Total: {total}</h3>\r\n      <h3>\r\n        Positive feedback: {positivePercentage ? positivePercentage + \"%\" : \"0\"}\r\n      </h3>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Statistics;\r\n\r\nStatistics.propTypes = {\r\n  data: PropTypes.object.isRequired,\r\n  good: PropTypes.number.isRequired,\r\n  neutral: PropTypes.number.isRequired,\r\n  bad: PropTypes.number.isRequired,\r\n  total: PropTypes.number.isRequired,\r\n  positivePercentage: PropTypes.number.isRequired,\r\n};\r\n","import PropTypes from \"prop-types\";\r\n\r\nconst Section = ({ title, children }) => {\r\n  return (\r\n    <>\r\n      <h1>{title}</h1>\r\n      {children}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Section;\r\n\r\nSection.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n};","import PropTypes from \"prop-types\";\r\n\r\nconst Notification = ({message}) => {\r\n    return ( <h2>{message}</h2> );\r\n}\r\n \r\nexport default Notification;\r\n\r\nNotification.propTypes = {\r\n    message: PropTypes.string.isRequired,\r\n  };","export const copyInNewObject = (obj) => {\r\n    const newState = {}\r\n    for (let key in obj) {\r\n      newState[key] = obj[key];\r\n    }\r\n    return newState\r\n}\r\n \r\n","export const hasCountTotal = (obj)=> {\r\n    const total = Object.values(obj).reduce((tot, feed)=> tot+=feed)\r\n      return total\r\n}","import React, { Component, useState } from \"react\";\r\nimport FeedbackOptions from \"../feedbackOptions/FeedbackOptions\";\r\nimport Statistics from \"../statistics/Statistics\";\r\nimport Section from \"../sectionTitle/Section\";\r\nimport Notification from \"../notification/Notification\";\r\nimport { copyInNewObject } from \"../../helpers/copyInNewObject\";\r\nimport { hasCountTotal } from \"../../helpers/hasCountTotal\";\r\n\r\nconst MainPage = () => {\r\n  const [state, setState] = useState({\r\n    good: 0,\r\n    neutral: 0,\r\n    bad: 0,\r\n  })\r\n\r\n  const  handleClick = (name) => {\r\n    const newName = name.toLowerCase();\r\n    setState((prevState) => ({\r\n      ...prevState,\r\n      [newName]: prevState[newName] + 1,\r\n    }));\r\n  };\r\n\r\n  const   countPositiveFeedbackPercentage = () => {\r\n    const newState = copyInNewObject(state);\r\n    const positive = Object.values(newState)[0];\r\n    const total = hasCountTotal(newState);\r\n    return Math.round((positive / total) * 100);\r\n  };\r\n\r\n  const   countTotalFeedback = () => {\r\n    const newState = copyInNewObject(state);\r\n    const total = hasCountTotal(newState);\r\n    return total;\r\n  };\r\n\r\n  const { good, neutral, bad } = state;\r\n    const options = Object.keys(state);\r\n    const total = countTotalFeedback()\r\n\r\n  return (      <>\r\n    <Section title=\"Please leave feedback\">\r\n      <FeedbackOptions\r\n        options={options}\r\n        onLeaveFeedback={handleClick}\r\n      />\r\n    </Section>\r\n    <Section title=\"Statistics\">\r\n      {total ? (\r\n        <Statistics\r\n          data={state}\r\n          good={good}\r\n          neutral={neutral}\r\n          bad={bad}\r\n          total={total}\r\n          positivePercentage={countPositiveFeedbackPercentage()}\r\n        />\r\n      ) : (\r\n        <Notification message=\"No feedback given\" />\r\n      )}\r\n    </Section>\r\n  </> );\r\n}\r\n \r\nexport default MainPage;\r\n\r\n\r\n","import './App.css';\nimport MainPage from './components/mainPage/MainPage.jsx'\n\nfunction App() {\n  return (\n    <div>\n       <MainPage/>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n"],"sourceRoot":""}